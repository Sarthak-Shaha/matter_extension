/******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file on_off_attribute_translator.h
 * @ingroup components
 *
 * @brief  OnOff cluster attribute state transition handler
 *
 * @{
 */

#include "attribute_translator_interface.hpp"

namespace unify::matter_bridge
{
{{#zcl_clusters}}
{{#if (unifySupportedCluster code)}}

/////////////////////////////////////////////////////////////////////////////////////////////////
/// Attribute Handler for the {{label}} cluster
/// Please note that the following attributes are not defined in UCL, and they must be handled 
/// by separate code
{{#zcl_attributes_server}}
{{#if (unifySupportedClusterAttribute parent.code code)}}
{{else}}
/// - {{label}} {{#isOptional}}(optional){{/isOptional}}
{{/if}}
{{/zcl_attributes_server}}
///
class {{asUpperCamelCase label}}AttributeAccess : public attribute_translator_interface
{
  public:
    {{asUpperCamelCase label}}AttributeAccess(matter_node_state_monitor &node_state_monitor, UnifyMqtt &unify_mqtt, device_translator &dev_translator) : 
    attribute_translator_interface(node_state_monitor, unify_mqtt, dev_translator, chip::app::Clusters::{{asUpperCamelCase label}}::Id, "attr_translator_{{asUpperCamelCase label}}"), m_unify_mqtt(unify_mqtt), m_dev_translator(dev_translator)
    {}
    

    CHIP_ERROR Read(const chip::app::ConcreteReadAttributePath &aPath,
                  chip::app::AttributeValueEncoder &aEncoder) override;
    CHIP_ERROR Write(const chip::app::ConcreteDataAttributePath &aPath,
                   chip::app::AttributeValueDecoder &aDecoder) override;

  private:
    {{#if (supportedClusterEvents code)}}
    void trigger_event(const bridged_endpoint *ep,
                          const chip::EventId &event,
                          const nlohmann::json &unify_value);
    {{/if}}
    void reported_updated(const bridged_endpoint *ep,
                          const std::string& cluster,
                          const std::string& attribute,
                          const nlohmann::json &unify_value) override;

   std::vector<const char *> unify_cluster_names() const override {return std::vector<const char *>({ "{{unifyClusterName code}}" });}
   UnifyMqtt &m_unify_mqtt;   
   device_translator &m_dev_translator;

};
{{else}}
//Skipping {{label}}
{{/if}}
{{/zcl_clusters}}
}  // namespace unify::matter_bridge