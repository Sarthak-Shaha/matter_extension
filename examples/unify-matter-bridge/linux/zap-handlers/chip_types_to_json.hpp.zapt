/*******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#include "app/data-model/NullObject.h"
#include <app-common/zap-generated/cluster-objects.h>
#include <nlohmann/json.hpp>

// Default translation
template <typename T>
nlohmann::json inline to_json(const T & value)
{
    return value;
}

nlohmann::json inline to_json(const chip::Span<const char> & value)
{
    return std::string( value.data(), value.size());
}

nlohmann::json inline to_json(const chip::Span<const unsigned char> & value)
{
    return std::string( reinterpret_cast<const char*>(value.data()), value.size());
}


template<typename T>
nlohmann::json inline to_json(const chip::app::DataModel::DecodableList<T> & value) {
    return "{}";   
}

template <typename T>
nlohmann::json inline to_json(chip::app::DataModel::Nullable<T> & value)
{
    if ((!value.IsNull()) && value.ExistingValueInEncodableRange())
    {
        return to_json(value.Value());
    }
    return nlohmann::json::value_t::null;
}

/***************************** Bitmap Convertes **************/
{{#zcl_clusters}}
{{#if (unifySupportedCluster code) }}
/***************************** Bitmap Converter FIXME**************/

{{#zcl_bitmaps}}
template<> nlohmann::json inline to_json(const chip::BitMask<chip::app::Clusters::{{asUpperCamelCase parent.label}}::{{label}}>& value) {
    using namespace chip::app::Clusters::{{asUpperCamelCase parent.label}};
    nlohmann::json obj;
    {{#if (unifyTypeExists label)}}
{{#zcl_bitmap_items}} 
    obj["{{unifyBitmapValName this}}"] = static_cast<bool>(value.GetField({{parent.label}}::k{{asUpperCamelCase label}}));
{{/zcl_bitmap_items}}
    return obj;
    {{else}}
    return static_cast<uint8_t>(value);
    {{/if}}
}
{{/zcl_bitmaps}}

{{#zcl_enums}}
template<> nlohmann::json inline to_json(const chip::app::Clusters::{{asUpperCamelCase parent.label}}::{{label}}& value) {
    using namespace chip::app::Clusters::{{asUpperCamelCase parent.label}};
    {{#if (unifyTypeExists label)}}
    switch( value ) {
        {{#zcl_enum_items}}
        case {{parent.label}}::k{{asUpperCamelCase label}}: return "{{unifyEnumValName this}}";
        {{/zcl_enum_items}}
        default: return "{}";
    }
    {{else}}
    return static_cast<uint8_t>(value);
    {{/if}}
}
{{/zcl_enums}}

{{#zcl_structs}}
{{#if (unifySupportedStruct label)}}
template<> nlohmann::json inline to_json(const chip::app::Clusters::{{asUpperCamelCase parent.label}}::Structs::{{label}}::Type& value) {
    using namespace chip::app::Clusters::{{asUpperCamelCase parent.label}};
    nlohmann::json obj;
    {{#if (unifyTypeExists label)}}
{{#zcl_struct_items}} 
    obj["{{asUpperCamelCase label}}"] = to_json(value.{{asLowerCamelCase label}});
{{/zcl_struct_items}}
    return obj;
    {{else}}
    return static_cast<uint8_t>(value);
    {{/if}}
}
{{/if}}
{{/zcl_structs}}
{{/if}}
{{/zcl_clusters}}
