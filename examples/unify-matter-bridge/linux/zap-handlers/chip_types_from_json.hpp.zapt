/*******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/
#include "app/data-model/NullObject.h"
#include "zcl_global_types.hpp"
#include "chip_type_traits.hpp"

// Default translation
template <typename T>
std::optional<T> inline from_json(const nlohmann::json& value)
{
    if constexpr (is_nullable<T>::value) {
        auto v =from_json<typename T::UnderlyingType>(value);
        if( v.has_value()) {
            return T(v.value());
        } else {
            return std::nullopt;
        }
    } else {
        return std::optional<T>(value);
    }
}

template<>
std::optional<chip::Span<const char>> inline from_json(const nlohmann::json & value) {
    std::string s = value.get<std::string>();
    chip::Span<const char> span(s.c_str(),s.length());
    return span;
}


{{#zcl_clusters}}
{{#if (unifySupportedCluster code)}}
  /***************************** Bitmap Converters **************/
  {{#zcl_bitmaps}}
  template<> inline std::optional<chip::BitMask<{{asUpperCamelCase parent.label}}::{{label}}>> from_json(const nlohmann::json& obj) {
    chip::BitMask<{{asUpperCamelCase parent.label}}::{{label}}> r;
    {{#zcl_bitmap_items}}
    r.SetField({{asUpperCamelCase parent.parent.label}}::{{parent.label}}::k{{asUpperCamelCase label}}, obj.value("{{unifyBitmapValName this}}",false));
    {{/zcl_bitmap_items}}
    return r;
  }
  {{/zcl_bitmaps}}


    {{#zcl_enums}}
template<> inline std::optional<{{asUpperCamelCase parent.label}}::{{label}}> from_json(const nlohmann::json& value) {
    const std::map< std::string, {{asUpperCamelCase parent.label}}::{{label}}>
        table = {
        {{#zcl_enum_items}}
            { "{{unifyEnumValName this}}" , {{asUpperCamelCase parent.parent.label}}::{{parent.label}}::k{{asUpperCamelCase label}} },
        {{/zcl_enum_items}}
        };

    auto i = table.find( value );
    if( i != table.end() ) {
        return i->second;
    } else {
        return std::nullopt;
    }
}
    {{/zcl_enums}}
{{/if}}
{{/zcl_clusters}}
