# ******************************************************************************
# * # License
# * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
# ******************************************************************************
# * The licensor of this software is Silicon Laboratories Inc. Your use of this
# * software is governed by the terms of Silicon Labs Master Software License
# * Agreement (MSLA) available at
# * www.silabs.com/about-us/legal/master-software-license-agreement. This
# * software is distributed to you in Source Code format and is governed by the
# * sections of the MSLA applicable to Source Code.
# *
# ******************************************************************************

import("//build_overrides/chip.gni")
import("${chip_root}/build/chip/tests.gni")
import("${chip_root}/build/chip/tools.gni")
import("${chip_root}/build/config/compiler/compiler.gni")
import("${chip_root}/build/config/linux/pkg_config.gni")

assert(chip_build_tools)

pkg_config("unify") {
  packages = [ "libunify_static" ]
}

config("unify-config") {
  include_dirs = [
    "src",
    "src/cluster_translator",
    "src/cluster_translator/emulations",
    "src/matter_node_state_monitor",
    "src/matter_wrappers",
    "src/device_type_mapper",
    "include",
    "zap-generated/data_model_translator",
    "zap-generated/data_model_translator/device-type-mapper",
    "zap-generated/unify-data-model-templates/device-type-mapper",
    "zap-generated/device_spec_compliance/device-type-mapper",
  ]
  ldflags = [ "-lboost_system" ]
  cflags = [ "-Wno-unused-const-variable" ]
}

config("coverage") {
  cflags = [
    "-fprofile-arcs",
    "-ftest-coverage",
  ]
}

static_library("unify-matter-bridge-lib") {
  sources = [
    "src/attribute_state_cache.cpp",
    "src/cluster_translator/bridged_device_basic_info_attribute_translator.cpp",
    "src/cluster_translator/cluster_emulator.cpp",
    "src/cluster_translator/group_command_translator.cpp",
    "src/cluster_translator/group_translator.cpp",
    "src/demo_uic_cli.cpp",
    "src/device_type_mapper/matter_device_translator.cpp",
    "src/device_type_mapper/matter_device_type_selection.cpp",
    "src/device_type_mapper/matter_device_types_clusters_list.inc",
    "src/dummy.cpp",
    "src/matter_bridge_cli.cpp",
    "src/matter_bridge_config.cpp",
    "src/matter_bridge_qrcode_publisher.cpp",
    "src/matter_data_storage.cpp",
    "src/matter_node_state_monitor/matter_cluster_interactor.cpp",
    "src/matter_node_state_monitor/matter_endpoint_builder.cpp",
    "src/matter_node_state_monitor/matter_node_state_monitor.cpp",
    "src/matter_wrappers/unify_mqtt_wrapper.cpp",
    "zap-generated/data_model_translator/attribute_translator.cpp",
    "zap-generated/data_model_translator/attribute_type_size.cpp",
    "zap-generated/data_model_translator/command_translator.cpp",
  ]

  if (chip_build_tests) {
    public_deps = [
      "${chip_root}/examples/platform/linux:app-main",
      "//src/tests/unify-matter-bridge-ut",
      ":get_chip_version"
    ]
  } else {
    public_deps = [
      "${chip_root}/examples/platform/linux:app-main",
      "//../unify-matter-bridge-common",
      ":get_chip_version"
    ]
  }

  output_dir = root_out_dir

  public_configs = [
    ":unify-config",
    ":unify",
  ]

  if (use_coverage) {
    configs += [ ":coverage" ]
  }
}

action("get_chip_version") {
  script = "../scripts/gen_version_info.py"
  outputs = ["$target_gen_dir/include/chip_version.hpp"]
  args = rebase_path(outputs, root_build_dir)
}

executable("unify-matter-bridge") {
  sources = [ "src/matter_bridge_main.cpp" ]

  deps = [ ":unify-matter-bridge-lib" ]
}

action("debian") {
  # create_package.py <pkg cfg file> <pkg name> <pkg bin> <pkg dir> --output-dir <out dir> <arch>
  deps = [":unify-matter-bridge"]
  script = "../../unify-matter-common/scripts/create_package.py"
  sources = ["package.cfg"]
  outputs = ["$root_out_dir/packages/*.deb"]
  args = rebase_path(sources, root_build_dir) + ["uic-mb", rebase_path(target_out_dir + "/bin/unify-matter-bridge",
          root_build_dir), rebase_path(target_gen_dir + "/uic-mb", root_build_dir), rebase_path("debconf", root_build_dir), "--output-dir",
          rebase_path(root_out_dir + "/packages", root_build_dir), target_cpu]
}

group("linux") {
  deps = [ ":debian" ]
}

if (chip_build_tests) {
  group("check") {
    deps = [ "//src/tests" ]
  }
}
